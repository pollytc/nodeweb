/**
 * Created by Administrator on 2017/1/9.
 */
var ser = require('socket.io');
var PATH = require("path");
const exec = require('child_process').exec;
var io = null;
var fs = require('fs');
var server = null;
var running = false;

proto = module.exports= function (s) {
    server =s;
    return proto;
}

proto.bokes = {};

proto.start = function () {
    if(server==null)return console.log('server 不存在');
    if(running)return;
    running = true;
    io=ser.listen(server);
    io.sockets.on('connection',function (socket) {
        console.log('connection',socket.id);
        socket.on('bezhubo',function (sock) {
            new boke(this);
            console.log("成为播客")
        })
        socket.on('lookzhubo',function (sock){
            new tingzong(this,sock);
        })
    });
}
//ffmpeg -threads 2 -y -r 2 -i ./%07d.jpeg  -absf aac_adtstoasc output.mp4
function boke(socket){
    proto.bokes[socket.id]=[];
    socket.frameindex=0;
    var isruning = true;
    var path = PATH.join('public','temp',socket.id);
    if(!fs.exists(path))fs.mkdir(path)
    socket.on('postframe',function (imgdata){
        if(!isruning) return;
        socket.frameindex ++;
        var pp =path+"/"+setName(socket.frameindex)+".jpeg";
        fs.writeFile(pp, new Buffer(imgdata,'base64'));
        send('getframe', imgdata);
    })
    socket.on("stoprecorde",function () {
        isruning = false;
        var out = PATH.join(path,socket.id+".mp4");
        var sp = exec('ffmpeg -threads 2 -y -r 2 -i '+path+'/%07d.jpeg  -absf aac_adtstoasc '+out);

        sp.on('close', function(code) {
            console.log('closing code: ' + code);
            socket.emit('loadfile',PATH.join('/temp',socket.id,socket.id+".mp4"));
        });
        sp.stdout.on('data', function(data) {
            console.log('stdout: ' + data);
        });
        sp.stderr.on('data', function(data) {
            //socket.emit('loadfile',);

            console.log('stdout: ' + data);
        });
    })
    socket.on("disconnect",function () {
        console.log(socket.id,'disconnect');
        send('message',{type:"stop",msg:"停止播放"});
        delete proto.bokes[socket.id];

    });
    socket.on('postaudio',function (data){
        send('getaudio',data);
    })
    socket.on('audioover',function (data){
        send('audioend',data);
    })
    function send(event,data){
        var broad = proto.bokes[socket.id];
        if(broad){
            broad.forEach(function (ele) {
                ele.emit(event,data);
            })
        }
    }
}

function setName(index){
    return (index+10000000).toString().substr(1);
}

function tingzong(socket,parantid){
    var tagdi = parantid;
    console.log(proto.bokes,proto.bokes[tagdi])
    if(proto.bokes[tagdi]){
        proto.bokes[tagdi].push(socket);
        console.log("加入房间"+socket.id);
        socket.emit('joinsucess',{message:'加入房间'});
    }else{
        socket.emit('joinerror',{message:'房间不存在'})
        console.log("加入房间失败"+socket.id);
    }

    socket.on("disconnect",function (){
        //console.log(socket.id,'退出房间',parantid);
        console.log("断开连接",proto.bokes[socket.id])
        if(proto.bokes[socket.id]){
            var ind = proto.bokes[socket.id].indexOf(socket);
            console.log(proto.bokes[socket.id])
            if(ind !=-1)proto.bokes[socket.id].split(ind,1);
        }
    });
}