/**
 * Created by Administrator on 2016/12/10.
 */
var PATH = require("path");
var FILE = require('fs');
var URL = require("url");
var multiparty = require("multiparty");
var gdb = require('./db');
var local = require('./local');
var baserun = require('./rootrun');

var ZIP = require('unzip');

var REQ,RES,NEXT;
var proto =module.exports = function(req,res,next){
    REQ =req,RES=res,NEXT=next;
    var oldrender = res.render;
    res.render=function () {
        var args=[];
        for(var k in arguments){
            args[k]=arguments[k];
        }
        var a = arguments[1];
        if(a){
            for(var s in a){
                local[s]=a[s];
            }
        }
        args[1]=local;
        oldrender.apply(res,args);
    }
    baserun(proto,req,res,next);
    var base = URL.parse(req.originalUrl).pathname;
    var ext = PATH.extname(base);
    if(['',".html"].indexOf(ext)==-1 || base.indexOf(".")>=1)
    {
        next();
        return;
    }
    var mud = praseURL(req.params[0]);

    if(req.method=="POST")
        mud.param.post = req.body;
    else if(req.method=="GET")
        mud.param.get = req.query;
    if(mud.item =="public") {
        return next();
    }


        doget(req,res,mud.item,mud.mod,mud.act,mud.param);

}
var options = {
    items:["",'user'],
    suffix:"Action",
    modelfix:"Model",
    appPath:PATH.sep,
    html:"html",
    uploadDir:"/upload",
    uploadFile:'imgFile',
    run:'rootrun',
    sessionName:"username",
    pageNUM :10,//分页时每页文章数目
    labelURL:'lab'
};
proto.use = function (app){
app.use("/*",proto);
}
proto.config = function (option) {
    for(var s in option)
        options[s]=option[s];
    this.global.root = options['appPath'];
}

function doget(req,res,item,mod,act,param) {
    item = item||options.items[0];
    mod =mod||"index";
    act =act||'index';
    try{
        // var path = options.appPath+"/"+options.suffix+"/"+item+"/"+mod+options.suffix;
        var path = PATH.join(options.appPath,options.suffix.toLowerCase(),item,mod+options.suffix+".js");
        FILE.stat(path,function(err,stat){
            if(err) {
                res.send(req.originalUrl+" not find");
                return ;
               // throw  new Error(req.originalUrl+" not find");
            }
            if(stat){
		        var cla  =require(path)
                var aact = cla(req,res);
                if(aact[act])
                    aact[act].call(aact,param);
                else
                    res.send(act+" not find function");
            }else{

            }
        })
    }catch (e){
        throw e;
    }
}

var GLOBAL=proto.global={
    root:"/",
    www:'/',
    ObjectID:require("mongodb").ObjectID,
    db:gdb,
    lcoal:local,
    pageNUM:options.pageNUM,
    A:function(moditem){
        var mud = praseURL(moditem);
        var r= PATH.join(options.appPath,options.suffix.toLowerCase(),mud.item,mud.mod+options.suffix);
        try{var single = require(r)(REQ,RES)}catch (e){throw new Error("not find "+r)};
        return single;
    },
    M:function (name) {
        var p =PATH.join(options.appPath,options.modelfix.toLowerCase(),name+options.modelfix);
        return require(p)
    },
    P:function () {
        var p =PATH.join(options.appPath,'plugs/plug');
        return require(p)
    },
    PATH:function (path) {
        return PATH.join(options.appPath,path);
    }
}

proto.global.marker = function(data) {
    REQ.session[options.sessionName]=data;
    RES.cookie(options.sessionName,data,1000 * 60 * 60 * 24 * 30);
}

proto.global.getMarker = function(key) {
    if(key&&REQ.session[options.sessionName]){
        return REQ.session[options.sessionName][key]
    }
    return REQ.session[options.sessionName];
}
proto.global.clearMarker = function(){
    RES.clearCookie(options.sessionName);
    REQ.session[options.sessionName] = null;
}

proto.global.option={
    data:{},
    flush:function(){

    },
    get:function (key) {
        this.data[key]
    },
    set:function (key,value) {
        this.data[key]=value;
    }
}
proto.global.unZip = function(path,topath){
    path = PATH.join(options.appPath,path);
    topath= PATH.join(options.appPath,topath);
    FILE.createReadStream(path).pipe(ZIP.Extract({ path:topath}));
}
proto.global.upload = function (callback) {

    var form = new multiparty.Form({uploadDir: PATH.join(options.appPath,options.uploadDir)});
    form.parse(REQ, function(err, fields, files) {
        if(err){
            RES.send("upload error");
            throw  new Error("upload error")
        }else{
            if(!files[options.uploadFile]){
                return RES.send('upload is wrong');
            }
            var inputFile = files[options.uploadFile][0];
            var uploadedPath = inputFile.path;
            var fname = PATH.parse(inputFile.path).base;
            var pp = PATH.join("/",options.uploadDir,fname);
            if(callback)callback(pp,fields);
            else
                return RES.send(pp);
        }
    })
}

proto.global.SOCK = function () {
    return require('./sock')(RES.app.httpserver);
}
proto.global.isLogin = function () {
    return proto.global.getMerker('_id');
}

// proto.global.getDBbyTable = function (table,back) {
//     proto.global.db.collection(table,function(err,t){
//         if(err)back(err);
//         else back(null,t);
//     })
// }

function praseURL(path){
    var urls = path.split("/");
    var p ={};
    if(urls.length==1){
        p.item = options.items[0];
        p.mod = urls[0];
    } else if(urls.length==2){
        p.mod = urls[0];
        p.act=urls[1];
        p.item = options.items[0];
    }else {
        p.item = urls[0];p.mod = urls[1];p.act = urls[2];
    }
    p.item = p.item||options.items[0];
    p.mod =p.mod||"index";
    p.act =p.act||'index';
    p.param ={};
    if(urls.length>3){
        var a = urls.slice(4);
        for(var i = 0;i<a.length;i+2)
            p.param[a[i]] =a[i+1];
    }
    return p;
}
// openDB();
// function openDB(){
//     mongo.open(function (err,db) {
//         if(err){
//             throw new Error('monogodb cannot connet');
//         }else{
//             proto.global.db = db;
//         }
//     })
// }
//
// function closeDB(){
//     mongo.close();
//     console.log('close db');
// }
